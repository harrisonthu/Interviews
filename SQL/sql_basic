HakerRank
https://www.hackerrank.com/domains/sql
PostgreSQL
https://www.postgresqltutorial.com/

General:

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_list [ASC |DESC]
OFFSET offset_row_count {ROW | ROWS}
FETCH {FIRST | NEXT} fetch_row_count {ROW | ROWS} ONLY


Functions to use:
   1.  Floor (Round Down to the nearest Integer)  e.g Floor(Avg([column_name]))  (PostGreSQL/ SQL SERVER)
   2.  Round (Round up to the nearest Integer)    e.g Round(Avg([column_name]))  (PostGreSQL/ SQL SERVER)
   3.  MAX
   4.  MIN
   5.  CAST                                       e.g ([column] AS DECIMAL (10,4) (PostGreSQL/ SQL SERVER)

Use of Round is improper here since it rounds Up in cases 
where decimal values are >= 0.5. Floor should be used instead since we're asked to round Down. 


Hackerrank:
https://www.hackerrank.com/challenges/weather-observation-station-3/problem
https://rextester.com/XKOJF88153

Example Table(Station):
+----------------+----------------+-------+
| ID |   CITY  | STATE | LAT_N   | LONG_W
+----------------+----------------+-------+
| 791 | Loma   | MD    | 34.88529336 | 73.41609
| 824 | Albany | AR    | 156.72891710 | 97.942
| 698 | Onaway | LA    | 46.70383 | 151.87
| 438 | Irvine | IL    | 90.238 | 59.68
+----------------+----------------+-------+
SQL questions:
1) Query a list of CITY names from STATION with even ID numbers only and exclude duplicates from your answer.
      - Oracle/Postgre sql  ==> Use "Mod" function
      --SELECT CITY FROM STATION WHERE MOD([ID],2) =0 

      -- SQL SERVER 
      SELECT DISTINCT(CITY) FROM STATION WHERE [ID]%2 =0 


2) Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table
      SELECT COUNT([CITY]) - COUNT(DISTINCT([CITY])) FROM STATION;


3) Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates
      -- SQL SERVER 
      SELECT DISTINCT city from station where city LIKE '[a, e, i, o, u]%' ;

4) Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
      -- SQL SERVER 
      SELECT DISTINCT(CITY) FROM STATION WHERE RIGHT(CITY,1) IN ('a','i','e','o','u'); 

5) Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters.

      select distinct city from station 
      where left(city,1) in ('a','e','i','o','u') 
      and  right(city, 1) in ('a','e','i','o','u')


6) Query the difference between the maximum and minimum populations in CITY.

      SELECT MAX([population])- MIN([population])
      FROM CITY



Example Table(Student):
+----------------+------+
| ID |   Name  | Marks 
+----------------+------+
| 1 | Ashley   | 81
| 2 | Samantha | 75
| 3 | Julia    | 76
| 4 | Belvet   | 84
+----------------+------+

5) Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. 
   If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), 
    secondary sort them by ascending ID.

      SELECT [NAME]
      FROM STUDENTS
      WHERE [Marks] >75
      ORDER BY 
      RIGHT([Name],3), ID asc;

https://www.hackerrank.com/challenges/salary-of-employees/problem
Example Table(Employee):
+----------------+-------------+--------------+---------------+
| employee_id |   name  | months |  salary  |  earnings(months*salary)
+----------------+-------------+--------------+---------------+
| 12228  |     Ashley   |  15   |   1968    |   29520
| 33645  |     Samantha |   1   |   3443    |   3443
| 45692  |     Julia    |  17   |   1608    |   27336
| 56118  |     Belvet   |   7   |   1345    |   9415
| 59725  |     Lisa     |  11   |   2330    |   25630
| 74197  |     Kimberly |  16   |   4372    |   69952
| 78454  |     Belvet   |   6   |   2017    |   12102
| 83565  |     Belvet   |   5   |   3396    |   16980
| 98607  |     Joe      |   9   |   3573    |   32157
+----------------+-------------+--------------+---------------+

6) Prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than $2000
   per month who have been employees for less than 10 months. Sort your result by ascending employee_id.

      SELECT NAME
      FROM EMPLOYEE
      WHERE [salary] > 2000
      AND [months] < 10
      ORDER BY employee_id asc;


7)  (We created the column "earnings" by salary*months), Find a query to find the maximum total earnings for all employees
    as well as the total number of employee who has maximum total earning. Then print these values as 2 spaces separated integers.
      
      SELECT TOP 1 ([salary]*[months]) as earnings, count(*)
      FROM EMPLOYEE
      GROUP BY [salary]*[months]
      ORDER BY 1 DESC
    

















--------------------- Facebook - Data Engineer ----------

Sample SQL questions:
1) Find the largest value in a given column.
2) Find the second largest value in a given column.
3) For each department, find the highest paid person and their salary.

Example Output:
+----------------+----------------+------------------+---------+
| first_name | last_name | dept_name | salary |
+----------------+----------------+------------------+----------+
| John | Smith | Reporting | 20000 |
| Ian | Peterson | Engineering | 80000 |
| John | Mills | Marketing | 50000 |
| Ava | Muffinson | Silly Walks | 10000 |
+----------------+-----------------+-------------------+----------+
