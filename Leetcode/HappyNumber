/*
URL:
https://leetcode.com/problems/happy-number/
Example: 
A happy number is a number defined by the following process: Starting with any positive integer, 
replace the number by the sum of the squares of its digits, and repeat the process 
until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy numbers.

Input: 19
Output: true
Explanation: 
1^(2) + 9^(2) = 82
8^(2) + 2^(2) = 68
6^(2) + 8^(2) = 100
1^(2) + 0^(2) + 0^(2) = 1

*/

class Solution {
    
    public boolean isHappy(int n) {
        
        if(n<= 0){
            return false;
        }
        
        while(true){
            int sum = 0;
            while(n !=0){
                //sum = sum+(n%10)*(n%10); // remainder
                sum += Math.pow(n%10,2);
                n /=10; // first digit before divide
            }
            if(sum ==1){
                return true; // happy number
            }
            if(sum ==4){
                return false; // since having 4 gives you loop
            }
            n= sum;
        } // End while loop
        
    }
}
