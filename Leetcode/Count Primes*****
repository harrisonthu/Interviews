/*
URL:
https://www.youtube.com/watch?v=7VPA-HjjUmU
Best Tutorial: https://www.youtube.com/watch?v=7VPA-HjjUmU

Input: 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.

*/


class Solution {
    
    // 0 ==> not prime
    // 1 ==> prime num
    public int countPrimes(int n) {
        
        // Prime number means the number divide by itself with 1
        if(n <2){
            return 0; // 0 = not prime, 1 = prime 
        }
        
        //Sieve of Eratosthenes
        // eg.       input = 36
        //          {1,36} {2,18}, {3,12}, {4,9}
        // (perfect squares)   {6,6}
        //          {36,1} {18,2}, {12,3}, {9,4}
        // In above eg. a= 1, b= 36
        //     a*b = n
        // But we need to start the loop from i=2 until n/2
        // since if that is not prime, there is value divisible before its' perfect number
        
        
        
        //Init an array of n bools to true
        //Loop through array and set multiples of prime p to false;
        //Loop through array and count the primes
    
        // when create boolean array initially set all false; 
        boolean [] result = new boolean[n+1];
        
        // First prime number = 2, set it
        result[2] = true;
        
        // jump the even number, because only odd number have chance to be prime except 2
        for(int i=3; i<n; i+=2){
            result[i] = true;
        }
        
        // Loop p = 3 until sqrt(n) since if curr val is not prime there is divisible val before sqrt(n)  
         for (int j = 3; j*j<=n; j++){  // p*p instead of p<=sqrt(n)
            if (result[j]){
                for (int i = j+j; i<=n; i += j ){
                    result[i] = false;
                }
            }
        }
        
        int count = 1;
        for (int i = 3; i < n; i+=2){
            count += result[i] ? 1:0;
        }
        return count;
        
    }
}


