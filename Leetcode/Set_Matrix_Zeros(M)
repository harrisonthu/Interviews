// Problem: https://leetcode.com/problems/set-matrix-zeroes/
// Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.
//
// Solution:https://leetcode.com/problems/set-matrix-zeroes/discuss/408914/Java-100-runtime-O(1)-extra-space

public class ZeroMatrix {

    public static void ZeroMatrix(int[][] matrix) {
    
        //Base Case: if Matrix length is less than 0(empty matrix), just return



        boolean firstrowzero = false; // check if any on the first row is zero
        boolean firstcolzero = false; // check if any on the first col is zero

        for (int i = 0; i <= matrix.length-1; i++) {
            if (matrix[i][0] == 0) { // checking first row
                firstrowzero = true;
                break;
            }
        }

        for (int i = 0; i <= matrix[0].length-1; i++) {
            if (matrix[0][i] == 0) { // checking first col
                firstcolzero = true;
                break;
            }
        }

        // starting at cell (1,1)
        for (int row = 1; row <= matrix.length-1; row++) {
            for (int col = 1; col <= matrix[0].length-1; col++) {
                if (matrix[row][col] == 0) { // current cell is zero
                    matrix[0][col] = 0; // set first row (in this case, starting from [1,1] to zero
                    matrix[row][0] = 0; // set first col (in this case, starting from [1,1] to zero
                }
            }
        }

        // Iterate for this scenario
        // Need to consider *cell to zero out.
        // [1, 1, 1, 1]
        // __________
        // [1*, |1, 0, 1]
        // [1, |1, 1 , 1]
        // [1, |1, 1, 1]
        // row start from 1, NOT zero
        for (int row = 1; row <= matrix.length - 1; row++) {

            System.out.println("inside row now ! !");
            System.out.println("matrix["+row+"][0] " + matrix[row][0]);
            if (matrix[row][0] == 0) {
                for (int i = 1; i <= matrix[0].length - 1; i++) {
                    System.out.println("inside row: "+ matrix[row][i]);
                    matrix[row][i] = 0;
                }
            }
        }

        // Iterate for this scenario
        // Need to consider *cell to zero out.
        // [1, 1, *1, 1]
        // __________
        // [1, |1, 0, 1]
        // [1, |1, 1 , 1]
        // [1, |1, 1, 1]
        // col start from 1, NOT zero
        for (int col = 1; col <= matrix[0].length - 1; col++) {

            System.out.println("inside col now ! !");
            System.out.println("matrix["+col+"][0] "+ matrix[0][col]);
            if (matrix[0][col] == 0) {
                for (int i = 1; i <= matrix.length - 1; i++) {
                    System.out.println("inside col: "+ matrix[i][col]);
                    matrix[i][col] = 0;
                }
            }
        }

        if (firstrowzero == true) {
            for (int row = 0; row <= matrix.length-1; row++) {
                matrix[row][0] = 0; // set all values in first row in the matrix to zero
            }
        }


        if (firstcolzero == true) {
            for (int col = 0; col <= matrix[0].length-1; col++) {
                matrix[0][col] = 0; // set all values in first col in the matrix to zero
            }
        }
    

    }

}
