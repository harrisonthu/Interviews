
Binary Tree
   1. BFS <Queue>
   2. DFS <Stack>
   
DFS
   1. Inorder   <Left, Root, Right>
   2. Preorder  <Root, Left, Right>
   3. Postorder <Left, Right, Root>

See more: https://www.programiz.com/dsa/heap-sort
Binary Tree Relationship between array indexs and tree elements:

  Notes: Reading element from int arry to binary tre
  
  If the index of any element in the array is i, the element in the index 
  2i+1 will become the (left child)
  2i+2 index will become the (right child). 
  Also, the parent of any element at index i is given by the lower bound of (i-1)/2.

        _________________________
Array: |_1_|_12_|_9_|_5_|_6_|_10_|
index: |_0___ 1___2___3___4__ 5__|

               1                           i
             /   \                       /   \
            12     9    ==>           (2i+1) (2i+2)
           / \    / 
          5  6   10 


For Preorder ==> add root, RIGHT, left for the tree so left subtree will be on top
----------------------------(PreOrder) ==> Root, Left, Right---------------------------------
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> mystack = new Stack<TreeNode>();
        
        if(root == null){
            return result;
        }
        
        mystack.push(root); // Initiate the stack with root
        // stack is not empty
        while(!mystack.isEmpty()){
            TreeNode curr = mystack.pop();
            int val = curr.val;
            result.add(val);
            
            // Add right subtree (since it is Preorder ==> Root, Left, Right)
            // But add right subtree first so left subtree will be top in the stack
            if(curr.right != null){
                mystack.push(curr.right);
            }
            
            // Add left subtree (since it is Preorder ==> Root, Left, Right)
            if(curr.left != null){
                mystack.push(curr.left);
            }
            
        }
        return result;
    }


----------------------------(In Order) ==> Left, Root, Right---------------------------------


    public List<Integer> inorderTraversal(TreeNode root) {
        
        List<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> mystack = new Stack<TreeNode>();
        
        if(root == null){
            return result;
        }
        
        //In order ==> Left, Root, Right
        
        // Initiate the curr node to add all left subtree until leaf
        TreeNode curr = root;
        
        // While loop until left subtree left node (or) stack is not empty
        while(curr !=null || !mystack.isEmpty()){
            // add all nodes from left subtree until sub leaf nodes
            while(curr != null){
                mystack.push(curr);
                curr = curr.left;
            }
            curr = mystack.pop();        // All left subtree Nodes
            
            int val = curr.val;          // Root Nodes
            result.add(val);
            // Since the outside while loop will break if curr.right == null
            //if(curr.right!=null){
            //mystack.push(curr.right);  // no need to add to stack, just set curr to right
            curr = curr.right;         // Right Nodes 
        }
        return result;
    }
    
    
    
    
----------------------------(Post Order) ==> Left, Right, Root---------------------------------
    
        
        
        List<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> mystack = new Stack<TreeNode>();
        
        if(root == null){
            return result;
        }
        
        // Post order ==> Left, Right, Root
        
        // add the first root to stack
        mystack.push(root);

        while(!mystack.isEmpty()){
            // temp node to traverse
            TreeNode curr = mystack.pop();
            result.add(0,curr.val); // add with reverse order //add to the left in arraylist
            if(curr.left != null){
                mystack.push(curr.left); // Add to stack (left)
            }
            if(curr.right != null){
                mystack.push(curr.right); // Add to stack (right)
            }
        }
        return result;
    }
