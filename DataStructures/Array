        Int Array
        
        int[] myintarray = new int[5];
        System.out.println("myintarray:"+ Arrays.toString(myintarray));         //myintarray:[0, 0, 0, 0, 0]
        // when creating int array, it will fill out 0 automatically
        See more: https://leetcode.com/problems/plus-one/
        
        Length vs Length()
        
                - array.length: length is a final variable applicable for arrays. 
        
                - string.length() : length() method is a final variable which is applicable for string objects. 
                length() method returns the number of characters presents in the string.
        
        
        List<Integer> v0 = new ArrayList<>(); 
        List<Integer> v1;                           // v1 == null

        // cast an array to a vector
        Integer[] a = {0, 1, 2, 3, 4};              // 'a'  would print out like "[Ljava.lang.Integer;@15db9742"
        v1 = new ArrayList<>(Arrays.asList(a));     // 'v1' would print out like "[0, 1, 2, 3, 4]"

        // make a copy
        List<Integer> v2 = v1;                      // another reference to v1
        List<Integer> v3 = new ArrayList<>(v1);     // ** make an actual copy of v1 **

        // modify element
        v2.set(3, 11);       // modify v2 will actually modify v1

        // Printing all result
        System.out.println("Printing v1: " + v1);    // The contents of v1 are: 0 1 2 11 4
        System.out.println("Printing v2: " + v2);    // The contents of v2 are: 0 1 2 11 4
        
        // iterate the vector
        for (int i = 0; i < v1.size(); ++i) {
            System.out.print(" " + v1.get(i));
        }
        System.out.println();  // Output: (Version 1)The contents of v1 are: 0 1 2 3 4

        for (int item : v1) {
            System.out.print(" " + item);
        }
        System.out.println();  // Output: [Version 2]The contents of v1 are: 0 1 2 3 4

        System.out.println("Printing v3: " + v3);    // The contents of v3 are: 0 1 2 3 4
        // v3 is a actual copy of v1, not referencing like v2, so v3 won't affect any changes from v1 

      Passed by Reference or arguments
        In many languages, primitive values (integers, floating point numbers, or characters)
        are copied when passed as arguments, and more complex data structures (arrays, heaps, or hash tables)
        are passed by reference. In Java, arguments that are pointers can be modified in place.
