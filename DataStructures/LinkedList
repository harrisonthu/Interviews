class MyLinkedList {

    /**  Instance variables for LinkedList */
    int length;
    Node head;
    
    // Node class
    class Node {
        int val;
        Node next;
        
        Node(int x) {
            this.val = x;
        }    
    } // End of Node class
    
    // Constructor of LinkedList
    public MyLinkedList(){
        this.length = 0;
        this.head = null;
    }
    
    
    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
    public int get(int index) {
        if(index < 0 || index >= this.length) {
            return -1;
        }
        else {
            int counter = 0;
            Node curr = head;
            while(counter != (index)) {
                curr = curr.next;
                counter++;
            }
            return curr.val;
        }
        
    }
    
    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
    public void addAtHead(int val) {
        Node newNode = new Node(val);
        newNode.next = this.head;
        this.head = newNode;
        this.length++;    
    }
    
    /** Append a node of value val to the last element of the linked list. */
    public void addAtTail(int val) {
        if(this.length == 0) {
            addAtHead(val);
            return;
        }
        Node newNode = new Node(val);
        Node temp = head;
        while(temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
        newNode.next = null;
        this.length++;
    }
    
    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, 
        the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. 
    */
    public void addAtIndex(int index, int val) {
        Node newNode = new Node(val);
        Node temp = head;
        int counter = 0;
        if((index) == this.length) {
            addAtTail(val);
            return;
        }
        if(index > this.length) {       // will not be inserted
            return;             
        }
        if(index == 0){
            addAtHead(val);             // Add at head of LL
            return;
        }
        while(counter != (index -1)) {      // Loop and set temp to the node before the ith index
            temp = temp.next;
            counter++;
        }
        newNode.next = temp.next;           //       (newNode)
        temp.next = newNode;                //  temp =========> a ==> b==>.....
        this.length++;
    }
    
    /** Delete the index-th node in the linked list, if the index is valid. */
    public void deleteAtIndex(int index) {
        if(index < 0 || index >= this.length) {
            return;
        }
        Node curr = head;
        if(index == 0) {
            head = curr.next;
        }
        else {
                Node current = head;
                Node pre = null;
                int counter =0;
                while(counter != index) {
                    pre = current;
                    current = current.next;
                    counter++;
                }
                pre.next = current.next;
                this.length--;
        }   
    }
}

    // main function
    public static void main(String[] args){
        LinkedList mylist = new LinkedList();
        mylist.head = new Node(1);
        Node second = new Node(2);
        Node thrid = new Node(3);
        Node fourth = new Node(4);
        Node five = new Node(6);
        Node six = new Node(7);

        mylist.head.next = second;
        second.next = thrid;
        thrid.next = fourth;
        fourth.next = five;
        five.next = six;
        System.out.println("mylist: "+mylist.head.next.next.next);
    }
}
