// Hashmap vs Hashtable
// 1. HashMap is non synchronized. It is not-thread safe and can’t be shared between many threads without proper synchronization code
//    whereas Hashtable is synchronized. It is thread-safe and can be shared with many threads.
// 2. HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value.
// 3. HashMap is generally preferred over HashTable if thread synchronization is not needed
//
// 4. Why HashTable doesn’t allow null and HashMap does?
//      To successfully store and retrieve objects from a HashTable, the objects used as keys must implement hashCode & equals() method. 
//      Since null is not an object, it can’t implement these methods. 
//      HashMap is an advanced version and improvement on the Hashtable. HashMap was created later.


Java Map API
// Make a new empty map
Map<String, String> map = new HashMap<String, String>();
map.get(key) -- retrieves the stored value for a key, or null if that key is not present in the map.

map.put(key, value) -- stores a new key/value pair in the map. Overwrites any existing value for that key.

map.containsKey(key) -- returns true if the key is in the map, false otherwise.

map.remove(key) -- removes the key/value pair for this key if present. Does nothing if the key is not present.


--------------------Problem ----------------------------

public class HashMap 
{

    // Hashmap = Key and value pair
    // TreeMap = using hashing idea but not key and value like Hashmap
    public static void main(String[] args) { 
       
        HashMap<String, Integer> hmap = new HashMap<>();
        hmap.put("vishal",  10);
        hmap.put("sachin",  30);
        hmap.put("vaibhav", 20);
        hmap.put("vishal",  10);     // hash map allows duplicate values but won't show both
        System.out.println("Size of hmap is: " + hmap.size());  // Size of Map is 3

        //loop HashMap to print all values
        for (Map.Entry entry : hmap.entrySet()) {
            System.out.println(entry.getKey().toString() + " = " + entry.getValue());
        }
        // Print out values after the loop
        //      vaibhav 20
        //      vishal  10  
        //      sachin  30
        
        // Another way to print all values
        System.out.println(hmap); // {vaibhav=20, vishal=10, sachin=30}

        if (hmap.containsKey("vishal"))
        {
            Integer a = hmap.get("vishal");
            System.out.println("value for key \"vishal\" is: " + a);  // value for key "vishal" is 10
        }
        hmap.clear();
        System.out.println(hmap);

    } 
      
    public static void print(Map<String, Integer> map)  
    { 
        if (map.isEmpty())  
        { 
            System.out.println("map is empty"); 
        }  
        else
        { 
            System.out.println(map); 
        } 




---------------------- Example of Hashmap(key, value)

Example 1:
Input: s = "egg", t = "add"
Output: true

Example 2:
Input: s = "foo", t = "bar"
Output: false


// checking if the solution is one-to-one fuction
class Solution {
    public boolean isIsomorphic(String s, String t) {
        // base case
        if(s == null || t == null || s.length() != t.length()){
            return false;
        }
        
        HashMap<Character, Character>  hmap1 = new HashMap<Character, Character>();
        HashMap<Character, Character>  hmap2 = new HashMap<Character, Character>();
        
        int i = 0;
        int j = 0;
        
        // assume that s and t length are the same
        while(i<s.length()){
            char c1 = s.charAt(i);  // Another way: s.charAt(i++)
            char c2 = t.charAt(j);  // Another way: s.charAt(j++)
            
            // if key is present   &&  map 'key' is current char same or not?
            if(hmap1.containsKey(c1) && hmap1.get(c1) != c2){
                return false;
            }
            // if key is present   &&  map 'key' is current char same or not?
            if(hmap2.containsKey(c2) && hmap2.get(c2) !=c1){
                return false;
            }
            
            // this current char is never added 
            if(!hmap1.containsKey(c1) && !hmap2.containsKey(c2)){
                hmap1.put(c1, c2); // add current key from s to hmap1 (one-to-one relationship)
                hmap2.put(c2, c1); // add current key from t to hmap2 (one-to-one relationship)
            }
            i++;
            j++;
        }
        return true;
        
    }
}


