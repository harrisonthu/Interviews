// Hashmap vs Hashtable
// 1. HashMap is non synchronized. It is not-thread safe and can’t be shared between many threads without proper synchronization code
//    whereas Hashtable is synchronized. It is thread-safe and can be shared with many threads.
// 2. HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value.
// 3. HashMap is generally preferred over HashTable if thread synchronization is not needed
//
// 4. Why HashTable doesn’t allow null and HashMap does?
//      To successfully store and retrieve objects from a HashTable, the objects used as keys must implement the hashCode method and the equals method. 
//      Since null is not an object, it can’t implement these methods. 
//      HashMap is an advanced version and improvement on the Hashtable. HashMap was created later.


public class HashMap 
{

    // Hashmap = Key and value pair
    // TreeMap = using hashing idea but not key and value like Hashmap
    public static void main(String[] args) { 
       
        HashMap<String, Integer> hmap = new HashMap<>();
        hmap.put("vishal",  10);
        hmap.put("sachin",  30);
        hmap.put("vaibhav", 20);
        hmap.put("vishal",  10);     // hash map allows duplicate values but won't show both
        System.out.println("Size of hmap is: " + hmap.size());  // Size of Map is 3

        //loop HashMap to print all values
        for (Map.Entry entry : hmap.entrySet()) {
            System.out.println(entry.getKey().toString() + " = " + entry.getValue());
        }
        // Print out values after the loop
        //      vaibhav 20
        //      vishal  10  
        //      sachin  30
        
        // Another way to print all values
        System.out.println(hmap); // {vaibhav=20, vishal=10, sachin=30}

        if (hmap.containsKey("vishal"))
        {
            Integer a = hmap.get("vishal");
            System.out.println("value for key \"vishal\" is: " + a);  // value for key "vishal" is 10
        }

        hmap.clear();
        System.out.println(hmap);

    } 
      
    public static void print(Map<String, Integer> map)  
    { 
        if (map.isEmpty())  
        { 
            System.out.println("map is empty"); 
        } 
          
        else
        { 
            System.out.println(map); 
        } 
