public class BinarySearch {

    // function to find any index of the value 'x'
    // arr[] = input array
    // l = lower index
    // u = upper index
    // value = value/int that you are searching in the array
    int BinarySearch(int arr[], int l, int u, int value) {
        if (u>1){
            int mid = l+(u-1)/2;

            // find the value u looking for
            if(arr[mid] == value){
                return mid;
            }
            else if (arr[mid] > value){
                return BinarySearch(arr,l,mid-1, value);
            }

            // input value is greater than mid index's value of the array
            else{
                return BinarySearch(arr, mid+1 ,u, value);
            }
        }

    // not found
    return -1;
    }



// Added on 8/8/2019 for the algorithm to solve the entry equal to its index   
// Question: Sorted array of distinct integers, returns an index i
//           Such that the element at index i equals i.
//           e.g: when the input is <-2,0,2,3,6,7,9>, algorithm return 2 or 3


    public static int searchEntryEqualToItsIndex(List<Integer> A) {
        int left = 0;                            // leftest index of the array A
        int right = A.size() - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;    // instead of (left+right/2) to avoid overflow bug
            int difference = A.get(mid) - mid;    // Comparing the index == value at the index

            if (difference == mid) {  // We found value that is equal index
                return mid;
            }

            //  In this scenario, difference > 0
            //  _________________
            // |____|__5___|_____|
            // i= 0    1      2
            //
            //  5 in the array is larger than the index (1)
            else if (difference > mid) {
                right = mid - 1;
            }

            //  difference <0
            else {
                left = mid + 1;
            }
        }
        return -1;
    }





    public static void main(String[] args){
        BinarySearch ob = new BinarySearch();
        int arr[] = {2,3,4,10,40};
        int n = arr.length;
        int x = 10;
        int result = ob.BinarySearch(arr,0,n-1,x);
        if (result == -1)
            System.out.println("Element not present");
        else
            System.out.println("Element found at index " +
                    result);

    }

}
