public class BinarySearchTree {

    // Create nested class for Node class
    public class Node{
        int key;
        Node left;
        Node right;
    }

    // Root of the Node
    Node root;

    //Constructor ==> contain Node ==> NULL
    BinarySearchTree(){
        this.root = null;
    }

    // ----- Insertion method ----- 
    // value = new value that I want to insert
    void Insertion(int value){
        root = InsertionHelper(root,value);
    }

    // use helper class for insertion
    // Reason using helper, so move left/right of the root.
    Node InsertionHelper(Node root,int value){
        if (root == null){
            root = new Node();
            return root;
        }
        // not null BST, already exist
        // recursively go down the tree
        if (value < root.key){ // less than current value
            InsertionHelper(root.left, value);
        }
        else if (value > root.key){
            InsertionHelper(root.right, value);
        }

        return root;
    }

    //End of BinarySearchTree Class
}





This below is from interview Cake:
https://www.interviewcake.com/question/java/second-largest-item-in-bst?course=fc1&section=trees-graphs

-------------- Creating BinaryTreeNode -----------------------
public class BinaryTreeNode {

    public int value;
    public BinaryTreeNode left;
    public BinaryTreeNode right;

    public BinaryTreeNode(int value) {
        this.value = value;
    }

    public BinaryTreeNode insertLeft(int leftValue) {
        this.left = new BinaryTreeNode(leftValue);
        return this.left;
    }

    public BinaryTreeNode insertRight(int rightValue) {
        this.right = new BinaryTreeNode(rightValue);
        return this.right;
    }
}


// Write a method to find the largest element in a binary search tree. 
  
  private static int findLargest(BinaryTreeNode rootNode) {
    if (rootNode == null) {
        throw new IllegalArgumentException("Tree must have at least 1 node");
    }
    if (rootNode.right != null)  {
        return findLargest(rootNode.right);
    }
    return rootNode.value;
}

//Write a method to find the 2nd largest element in a binary search tree. 

public static int findSecondLargest(BinaryTreeNode rootNode) {
    if (rootNode == null || (rootNode.left == null
            && rootNode.right == null)) {
        throw new IllegalArgumentException("Tree must have at least 2 nodes");
    }

         ( 5 )
        /     \
      (3)     (8)
     /  \     /  \
   (1)  (4) (7)   (12)
                  /
               (10)
               /  \
             (9)  (11)

    // case: we're currently at largest, and largest has a left subtree(see above case)
    // so 2nd largest is largest in said subtree
    if (rootNode.left != null && rootNode.right == null) {
        return findLargest(rootNode.left);
    }

    // case: we're at parent of largest, and largest has no left subtree,
    // so 2nd largest must be current node
    if (rootNode.right != null
            && rootNode.right.left == null
            && rootNode.right.right == null) {
        return rootNode.value;
    }

    // otherwise: step right
    return findSecondLargest(rootNode.right);
}









