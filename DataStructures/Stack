

Depth-First Search with a Stack
In depth-first search we go down a path until we get to a dead end; then we backtrack or back up (by popping a stack)
to get an alternative path.

  Create a stack
  Create a new choice point
  Push the choice point onto the stack
  while (not found and stack is not empty)
      Pop the stack
      Find all possible choices after the last one tried
      Push these choices onto the stack
  Return



------------------------------Example   --------------------------------------------

// This question is from Page 19 from 50 Interview Questions (Byte by Byte)
// Reverse Stack
// Question(Q20) :  Given a stack, reverse the items without creating any additional data structures.
// Solution:  https://www.byte-by-byte.com/reversestack/
//

import java.util.Stack;

public class reversestack {


    public Stack<Integer> reverse(Stack<Integer> stack) {
        if (stack.isEmpty()) {
            return stack;
        }
        int temporary = stack.pop();
        reverse(stack);
        insertatBottom(stack, temporary);
        return stack;
    }

    public void insertatBottom(Stack<Integer> stack, int x) {
        if (stack.isEmpty()) {
            stack.push(x);
            return;
        }
        int temp = stack.pop();
        insertatBottom(stack, x);
        stack.push(temp);
        return;
    }

}
