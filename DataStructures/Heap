Read More: https://www.programiz.com/dsa/heap-sort

Heap is a special tree-based data structure.
A binary tree is said to follow a heap data structure if
   1. it is a complete binary tree
   2. All nodes in the tree follow the property that they are greater than their children i.e. the largest element 
      is at the root and both its children and smaller than the root and so on. Such a heap is called a (max-heap). 
      If instead all nodes are smaller than their children, it is called a (min-heap).


Relationship between array indexes and tree elements
        _________________________
Array: |_1_|_12_|_9_|_5_|_6_|_10_|
index: |_0___ 1___2___3___4__ 5__|

                              (Finding index of children)        (Finding index of parent)
               1                      i                        (lowerbound)    (i-1)/2   
             /   \                  /   \                                      /      
            12     9    ==>      (2i+1) (2i+2)          ==>                   i
           / \    / 
          5  6   10 
 

void heapify(int arr[], int n, int i){
  int largest = i;
  int left = 2*i+1;
  int right = 2*i+2;
  
  if( left < n && arr[left] > arr[largest]) {
      largest = left;
  }
      
  if(right < n && arr[right] > arr[largest]){
    largest = right;
  }
  
  if (largest != i){
    swap(arr[i], arr[largest]);
    // Recursively heapify the affected sub-tree
    heapify(arr, n, largest);
  }
}

-------------------  Heap Sort ----------------------------

/ Java program for implementation of Heap Sort
public class HeapSort
{	
  
    public void sort(int arr[])
    {
        int n = arr.length;
 
      	// Build max heap
         // start recursing from the half of the array
        for (int i = n / 2 - 1; i >= 0; i--) {
          heapify(arr, n, i);
        }
            
 
		// Heap sort
        for (int i=n-1; i>=0; i--)
        {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;
 
          	// Heapify root element
            heapify(arr, i, 0);
        }
    }
 
    void heapify(int arr[], int n, int i)
    {
      	// Find largest among root, left child and right child
        int largest = i; 
        int l = 2*i + 1; 
        int r = 2*i + 2;  
 
        if (l < n && arr[l] > arr[largest])
            largest = l;
 
        if (r < n && arr[r] > arr[largest])
            largest = r;
 
      	// Swap and continue heapifying if root is not largest
        if (largest != i)
        {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;
 
            heapify(arr, n, largest);
        }
    }
 
    static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i=0; i < n; ++i)
            System.out.print(arr[i]+" ");
        System.out.println();
    }
 
    public static void main(String args[])
    {
        int arr[] = {1,12,9,5,6,10};
        HeapSort hs = new HeapSort();
        hs.sort(arr);
 
        System.out.println("Sorted array is");
        printArray(arr);
    }
}









